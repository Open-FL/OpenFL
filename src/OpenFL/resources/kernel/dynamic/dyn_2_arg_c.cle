#include helper.cle

__kernel void #type0_c_vv(__global uchar* image, int3 dimensions, int channelCount, float maxValue, __global uchar* channelEnableState, float valueA, float valueB)
{
	int idx = get_global_id(0);
	int channel = (int)fmod((float)idx, (float)channelCount);
	if(channelEnableState[channel]==0)
	{
		return;
	}
	image[idx] = (uchar)clamp(#type1(ToUV(image[idx], maxValue), valueA, valueB) * maxValue, 0.0f, maxValue);
}

__kernel void #type0_c_tv(__global uchar* image, int3 dimensions, int channelCount, float maxValue, __global uchar* channelEnableState, __global uchar* valueA, float valueB)
{
	int idx = get_global_id(0);
	int channel = (int)fmod((float)idx, (float)channelCount);
	if(channelEnableState[channel]==0)
	{
		return;
	}
	image[idx] = (uchar)clamp(#type1(ToUV(image[idx], maxValue), ToUV(valueA[idx], maxValue), valueB) * maxValue, 0.0f, maxValue);
}

__kernel void #type0_c_vt(__global uchar* image, int3 dimensions, int channelCount, float maxValue, __global uchar* channelEnableState, float valueA, __global uchar* valueB)
{
	int idx = get_global_id(0);
	int channel = (int)fmod((float)idx, (float)channelCount);
	if(channelEnableState[channel]==0)
	{
		return;
	}
	image[idx] = (uchar)clamp(#type1(ToUV(image[idx], maxValue), valueA, ToUV(valueB[idx], maxValue)) * maxValue, 0.0f, maxValue);
}


__kernel void #type0_c_tt(__global uchar* image, int3 dimensions, int channelCount, float maxValue, __global uchar* channelEnableState, __global uchar* valueA, __global uchar* valueB)
{
	int idx = get_global_id(0);
	int channel = (int)fmod((float)idx, (float)channelCount);
	if(channelEnableState[channel]==0)
	{
		return;
	}
	image[idx] = (uchar)clamp(#type1(ToUV(image[idx], maxValue), ToUV(valueA[idx], maxValue), ToUV(valueB[idx], maxValue)) * maxValue, 0.0f, maxValue);
}



