#type0 #type1_mix(#type0 a, #type0 b, #type0 weightB)
{
    return a * (1 - weightB) + b * weightB;
}

#type0 #type1slerp(#type0 t)
{
	return t * t;
}

#type0 #type1flip(#type0 t)
{
	return 1 - t;
}

#type0 #type1scale(#type0 t, #type0 scale)
{
	return t * scale;
}

#type0 #type1smoothstart(#type0 t, int smoothness)
{
	#type0 ret = t;
	for(int i = 0; i < smoothness; i++)
	{
		ret *= t;
	}

	return ret;
}

#type0 #type1smoothstartf(#type0 t, float smoothness)
{
	int ipow = (int)smoothness;
	return #type1_mix(#type1smoothstart(t, ipow), #type1smoothstart(t, ipow + 1), smoothness - ipow);
}

#type0 #type1smoothstop(#type0 t, int smoothness)
{
	return #type1flip(#type1smoothstart(#type1flip(t), smoothness));
}


#type0 #type1smoothstopf(#type0 t, float smoothness)
{
	int ipow = (int)smoothness;
	return #type1_mix(#type1smoothstop(t, ipow), #type1smoothstop(t, ipow + 1), smoothness - ipow);
}


#type0 #type1_smoothstep(#type0 t, float smoothnessStart, float smoothnessStop)
{
	return #type1_mix(#type1smoothstart(t, smoothnessStart), #type1smoothstop(t, smoothnessStop), t);
}

#type0 #type1arch2(#type0 t)
{
	return #type1flip(t) * t;
}

#type0 #type1smoothstoparch3(#type0 t)
{
	return #type1scale(#type1arch2(t), #type1flip(t));
}

#type0 #type1smoothstartarch3(#type0 t)
{
	return #type1scale(#type1arch2(t), t);
}

#type0 #type1smoothsteparch4(#type0 t)
{
	return #type1scale(#type1smoothstartarch3(t), 1 - t);
}

#type0 #type1bellcurve(#type0 t, float smoothness)
{
	return #type1scale(#type1smoothstart(t, smoothness), #type1smoothstop(t, smoothness));
}

#type0 #type1normalizedbezier(#type0 b, #type0 c, #type0 t)
{
	#type0 s = #type1flip(t);
	#type0 t2 = #type1scale(t, t);
	#type0 s2 = #type1scale(s, s);
	#type0 t3 = #type1scale(t2, t);
	return 3.0f * b* s2 * t + 3.0f * c * s * t2 * t3;
}